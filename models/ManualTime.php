<?php

namespace app\models;

use app\helpers\WorkLog as WorkLogHelper;
use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "manual_time".
 *
 * @property integer $id
 * @property integer $user_id
 * @property integer $start_timestamp
 * @property integer $end_timestamp
 * @property string $issue_key
 * @property string $comment
 * @property string $comment_admin
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 *
 * @property User $user
 */
class ManualTime extends \yii\db\ActiveRecord
{
    const STATUS_PENDING = 0;
    const STATUS_REJECTED = 1;
    const STATUS_ADDED = 2;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'manual_time';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value' => time(),
            ],
            [
                'class'=> BlameableBehavior::className(),
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => 'updated_by',
                'value' => isset(Yii::$app->user) ? Yii::$app->user->id : null,
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['user_id', 'start_timestamp', 'end_timestamp', 'status', 'created_at', 'updated_at', 'created_by', 'updated_by'], 'integer'],
            [['issue_key', 'comment', 'comment_admin'], 'string'],
            [['user_id', 'start_timestamp', 'end_timestamp', 'issue_key'], 'required'],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['updated_by' => 'id']],
            ['start_timestamp', function ($attribute, $params) {
                if ($this->$attribute == $this->attributes['end_timestamp'])
                    $this->addError($attribute, 'Промежуток времени не выбран!');

                if ($this->$attribute > $this->attributes['end_timestamp'])
                    $this->addError($attribute, 'Промежуток времени выбран не верно!');
            }],
            ['end_timestamp', function ($attribute, $params) {
                if ($this->$attribute == $this->attributes['start_timestamp'])
                    $this->addError($attribute, 'Промежуток времени не выбран!');

                if ($this->$attribute < $this->attributes['start_timestamp'])
                    $this->addError($attribute, 'Промежуток времени выбран не верно!');
            }],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'user_id' => 'User',
            'start_timestamp' => 'Start Timestamp',
            'end_timestamp' => 'End Timestamp',
            'issue_key' => 'Issue',
            'comment' => 'Comment',
            'comment_admin' => 'Comment admin',
            'status' => 'Status',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy()
    {
        return $this->hasOne(User::className(), ['id' => 'updated_by']);
    }

    /**
     * @param bool $insert
     *
     * @return bool
     */
    public function beforeSave($insert)
    {
        if (!Yii::$app->user->identity->isAdmin()) {
            $this->status = self::STATUS_PENDING;
            $this->user_id = Yii::$app->user->id;
        } else {
            if ($this->status !== self::STATUS_REJECTED)
                $this->status = self::STATUS_ADDED;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @param bool  $insert
     * @param array $changedAttributes
     *
     * @throws \yii\base\Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        if (Yii::$app->user->identity->isAdmin() && $this->status === self::STATUS_ADDED)
            (new WorkLogHelper())->addManualTime($this);

        return parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}
